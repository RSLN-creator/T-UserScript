// ==UserScript==
// @name         Bilibili收藏夹自动分类 (批量处理版 - 优化版)2.4
// @namespace    http://tampermonkey.net/
// @version      2.4
// @description  B站收藏夹视频自动分类，采用批量API，高效稳定，优化速率限制和进度显示
// @author       RSYHN
// @license      GPL-3.0-or-later
// @match        *://space.bilibili.com/*/favlist*
// @grant        GM_xmlhttpRequest
// @grant        GM_addStyle
// @connect      api.bilibili.com
// @note         原脚本来源于 https://github.com/jqwgt
// ==/UserScript==

(function() {
    'use strict';

    // 配置常量
    const CONFIG = {
        RATE_LIMIT_DELAY: 300,
        INFO_FETCH_DELAY: 300,
        BATCH_SIZE: 20
    };

    // --- 样式部分 ---
    GM_addStyle(`
        .bili-classifier-container {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            color: #222;
        }
        .bili-classifier-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            z-index: 10000;
            max-height: 80vh;
            overflow-y: auto;
            width: 700px;
            max-width: 90vw;
            display: flex;
            flex-direction: column;
        }
        .bili-classifier-modal h3 {
            margin-top: 0;
            color: #00a1d6;
            font-size: 1.5em;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        .bili-classifier-btn {
            padding: 6px 12px;
            background: #00a1d6;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 13px;
            transition: all 0.2s;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .bili-classifier-btn:hover {
            background: #0087b4;
        }
        .bili-classifier-btn.secondary {
            background: #f0f0f0;
            color: #666;
        }
        .bili-classifier-btn.secondary:hover {
            background: #e0e0e0;
        }
        .bili-classifier-btn.danger {
            background: #ff4d4f;
        }
        .bili-classifier-btn.danger:hover {
            background: #ff7875;
        }
        .bili-classifier-group {
            margin: 15px 0;
            padding: 15px;
            border: 1px solid #eee;
            border-radius: 8px;
            background: #fafafa;
        }
        .bili-classifier-group-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            gap: 10px;
        }
        .bili-classifier-input {
            padding: 6px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            width: 200px;
            height: 32px;
            box-sizing: border-box;
        }
        .bili-classifier-select {
            padding: 6px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            width: 220px;
            height: 32px;
            box-sizing: border-box;
        }
        .bili-classifier-checkbox-group {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 8px;
            margin-top: 10px;
        }
        .bili-classifier-checkbox-label {
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        .bili-classifier-checkbox {
            margin-right: 8px;
        }
        .bili-classifier-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-top: 15px;
            border-top: 1px solid #eee;
            margin-top: auto;
        }
        .bili-classifier-links {
            display: flex;
            gap: 10px;
        }
        .bili-classifier-float-links {
            display: flex;
            gap: 10px;
        }
        .bili-classifier-link-btn {
            padding: 6px 12px;
            background: #f0f0f0;
            color: #666;
            border-radius: 6px;
            text-decoration: none;
            font-size: 13px;
            display: flex;
            align-items: center;
            gap: 5px;
            height: 32px;
        }
        .bili-classifier-link-btn:hover {
            background: #e0e0e0;
        }
        .bili-classifier-footer-buttons {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        .bili-classifier-progress {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background: white;
            padding: 15px 20px;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            z-index: 10000;
            min-width: 250px;
        }
        .bili-classifier-progress-bar {
            width: 100%;
            height: 10px;
            background: #f0f0f0;
            border-radius: 5px;
            margin: 8px 0;
            overflow: hidden;
        }
        .bili-classifier-progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #00a1d6, #00c4ff);
            border-radius: 5px;
            transition: width 0.3s;
        }
        .bili-classifier-float-btn {
            position: fixed;
            right: 30px;
            bottom: 30px;
            z-index: 9999;
            display: flex;
            flex-direction: column;
            gap: 10px;
            align-items: flex-end;
        }
        .bili-classifier-radio-group {
            display: flex;
            gap: 15px;
            margin: 15px 0;
        }
        .bili-classifier-radio-label {
            display: flex;
            align-items: center;
            gap: 5px;
            cursor: pointer;
        }
        .bili-classifier-option-group {
            margin: 15px 0;
            padding: 15px;
            border: 1px solid #eee;
            border-radius: 8px;
        }
        .bili-classifier-content {
            flex: 1;
            overflow-y: auto;
        }
    `);

    // --- 工具函数 ---
    const utils = {
        /** 获取CSRF token */
        getCsrf() {
            const match = document.cookie.match(/bili_jct=([^;]+)/);
            return match ? match[1] : '';
        },

        /** 日志记录 */
        log(message, type = 'info') {
            const styles = {
                info: 'color: #00a1d6',
                error: 'color: #ff4d4f',
                success: 'color: #52c41a',
                warning: 'color: #faad14'
            };
            console.log(`%c[收藏夹分类] ${message}`, styles[type] || styles.info);
        },

        /** 稳健的API请求封装（解析responseText兼容性） */
        apiRequest(options) {
            return new Promise((resolve, reject) => {
                GM_xmlhttpRequest({
                    ...options,
                    onload: (response) => {
                        try {
                            const status = response.status;
                            let payload = response.response;
                            if ((payload === undefined || payload === null) && response.responseText) {
                                try { payload = JSON.parse(response.responseText); } catch (e) { payload = response.responseText; }
                            }
                            if (status >= 200 && status < 300) {
                                resolve(payload);
                            } else {
                                reject(new Error(`请求失败: ${status}`));
                            }
                        } catch (err) {
                            reject(err);
                        }
                    },
                    onerror: (error) => {
                        reject(new Error(`网络错误`));
                    },
                    ontimeout: (err) => {
                        reject(new Error('请求超时'));
                    }
                });
            });
        },

        /** 延迟函数 */
        delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
    };

    // --- API服务 ---
    const apiService = {
        /** 获取用户收藏夹列表 */
        async getUserFavLists() {
            // 尝试获取 mid（user id）
            let mid = '';
            try {
                mid = window.location.pathname.split('/')[1] || '';
                if (!mid) {
                    // 备用：尝试从页面 meta 或脚本变量获取（若无则抛错）
                    const metaMid = document.querySelector('meta[name="mid"]')?.content;
                    if (metaMid) mid = metaMid;
                }
            } catch (e) { mid = ''; }

            if (!mid) {
                throw new Error('无法获取用户UID(mid)，请在用户收藏夹页面运行脚本。');
            }

            const response = await utils.apiRequest({
                method: 'GET',
                url: `https://api.bilibili.com/x/v3/fav/folder/created/list-all?up_mid=${mid}`,
                responseType: 'json'
            });

            return response?.data?.list || [];
        },

        /** 获取视频详细信息 */
        async getVideoInfo(aid) {
            const response = await utils.apiRequest({
                method: 'GET',
                url: `https://api.bilibili.com/x/web-interface/view?aid=${aid}`,
                responseType: 'json'
            });

            // 兼容性处理
            const data = response?.data || response;
            if (!data) {
                throw new Error(`视频 ${aid} 可能已失效或无法访问`);
            }
            utils.log(`获取视频 ${aid} 信息: ${data.title || data.typename || aid}`, 'info');
            return data;
        },

        /** 获取收藏夹视频列表（逐页并获取视频信息） 
         *  新增 progressCb 参数：每处理完一个视频会调用 progressCb(currentCount)
         */
        async getFavVideos(mediaId, ps = CONFIG.BATCH_SIZE, pn = 1, videos = [], progressCb = null) {
            const response = await utils.apiRequest({
                method: 'GET',
                url: `https://api.bilibili.com/x/v3/fav/resource/list?media_id=${mediaId}&pn=${pn}&ps=${ps}&order=mtime&type=0&platform=web`,
                responseType: 'json'
            });

            const data = response?.data;
            if (!data || !data.medias) {
                throw new Error('获取视频列表失败或接口返回异常');
            }

            for (const video of data.medias) {
                try {
                    const vid = video.id || video.rid || video.aid;
                    if (!vid) {
                        utils.log('跳过无效视频条目', 'warning');
                        continue;
                    }
                    const videoInfo = await apiService.getVideoInfo(vid);
                    videos.push({
                        aid: vid,
                        title: video.title || videoInfo.title || '',
                        tid: videoInfo.tid || videoInfo.typeid || 0,
                        tname: videoInfo.tname || videoInfo.typename || '未知',
                        play: (videoInfo.stat && videoInfo.stat.view) || video.play || 0
                    });
                } catch (error) {
                    utils.log(`跳过视频 ${video.id || '未知'}: ${error.message}`, 'warning');
                }

                // 每获取一个有效/跳过一个后通知进度回调（count = 当前已收集的视频数）
                try {
                    if (typeof progressCb === 'function') progressCb(videos.length);
                } catch (e) {
                    /* 忽略回调错误 */
                }

                await utils.delay(CONFIG.INFO_FETCH_DELAY);
            }

            if (data.has_more) {
                return await apiService.getFavVideos(mediaId, ps, pn + 1, videos, progressCb);
            }

            return videos;
        },

        /** 创建收藏夹 */
        async createFolder(title) {
            const csrf = utils.getCsrf();
            if (!csrf) throw new Error('缺少 csrf (bili_jct)，请登录并允许脚本读取 cookie。');

            const response = await utils.apiRequest({
                method: 'POST',
                url: 'https://api.bilibili.com/x/v3/fav/folder/add',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                data: `csrf=${csrf}&title=${encodeURIComponent(title)}&jsonp=jsonp`,
                responseType: 'json'
            });

            if (response?.code === 0) {
                return response.data.id;
            } else {
                throw new Error(response?.message || '创建收藏夹失败');
            }
        },

        /** 添加视频到收藏夹 */
        async addToFav(aid, fid) {
            const csrf = utils.getCsrf();
            if (!csrf) throw new Error('缺少 csrf (bili_jct)，请登录并允许脚本读取 cookie。');

            const response = await utils.apiRequest({
                method: 'POST',
                url: 'https://api.bilibili.com/x/v3/fav/resource/deal',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                data: `csrf=${csrf}&rid=${aid}&type=2&add_media_ids=${fid}&jsonp=jsonp`,
                responseType: 'json'
            });

            if (response?.code !== 0) {
                throw new Error(response?.message || '添加视频失败');
            }
            return response;
        },

        /** 从收藏夹移除视频 */
        async removeFromFav(aid, fid) {
            const csrf = utils.getCsrf();
            if (!csrf) throw new Error('缺少 csrf (bili_jct)，请登录并允许脚本读取 cookie。');

            const response = await utils.apiRequest({
                method: 'POST',
                url: 'https://api.bilibili.com/x/v3/fav/resource/deal',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                data: `csrf=${csrf}&rid=${aid}&type=2&del_media_ids=${fid}&jsonp=jsonp`,
                responseType: 'json'
            });

            if (response?.code !== 0) {
                throw new Error(response?.message || '移除视频失败');
            }
            return response;
        }
    };

    // --- UI管理 ---
    const uiManager = {
        /** 创建进度条 */
        createProgressDiv(id, initialMessage = '正在处理...') {
            const div = document.createElement('div');
            div.id = id;
            div.className = 'bili-classifier-progress';
            div.innerHTML = `
                <div>${initialMessage}</div>
                <div class="bili-classifier-progress-bar">
                    <div class="bili-classifier-progress-fill" style="width: 0%"></div>
                </div>
                <div>0/0</div>
            `;
            document.body.appendChild(div);
            return div;
        },

        /** 更新进度，避免除零 */
        updateProgress(id, message, current, total, skipped = 0) {
            const progressDiv = document.getElementById(id) || this.createProgressDiv(id, message);
            progressDiv.querySelector('div:first-child').textContent = message;
            const pct = (total && total > 0) ? Math.min(100, Math.max(0, (current / total) * 100)) : (current > 0 ? 100 : 0);
            progressDiv.querySelector('.bili-classifier-progress-fill').style.width = `${pct}%`;
            progressDiv.querySelector('div:last-child').textContent =
                `${current}/${total}${skipped > 0 ? ` (跳过${skipped}个)` : ''}`;
        },

        /** 移除进度条 */
        removeProgress(id) {
            document.getElementById(id)?.remove();
        }
    };

    // --- 配置界面 ---
    class ConfigModal {
        constructor(tidGroups) {
            this.tidGroups = tidGroups;
            this.existingFolders = [];
            this.modal = null;
        }

        /** 创建模态框 */
        create() {
            this.modal = document.createElement('div');
            this.modal.className = 'bili-classifier-container bili-classifier-modal';
            this.modal.innerHTML = this.generateHTML();
            document.body.appendChild(this.modal);

            this.loadExistingFolders();
            this.bindEvents();

            return new Promise((resolve, reject) => {
                this.resolve = resolve;
                this.reject = reject;
            });
        }

        /** 生成HTML内容 */
        generateHTML() {
            return `
                <h3>收藏夹自动分类</h3>
                <div class="bili-classifier-content">
                    ${this.generateOperationMode()}
                    ${this.generateAutoClassifyOption()}
                    ${this.generateCustomGroupsSection()}
                    ${this.generateDefaultGroupsSection()}
                </div>
                ${this.generateFooter()}
            `;
        }

        /** 生成操作模式选择 */
        generateOperationMode() {
            return `
                <div class="bili-classifier-radio-group">
                    <label class="bili-classifier-radio-label">
                        <input type="radio" name="operationMode" value="copy" checked>
                        复制模式
                    </label>
                    <label class="bili-classifier-radio-label">
                        <input type="radio" name="operationMode" value="move">
                        移动模式 (将视频移出原收藏夹)
                    </label>
                </div>
            `;
        }

        /** 生成自动分类选项 */
        generateAutoClassifyOption() {
            return `
                <div class="bili-classifier-option-group">
                    <label class="bili-classifier-checkbox-label">
                        <input type="checkbox" id="autoClassifyUnassigned" checked>
                        对未自定义分组的视频自动按分区分类 (推荐)
                    </label>
                </div>
            `;
        }

        /** 生成自定义分组部分 */
        generateCustomGroupsSection() {
            return `
                <div style="margin-bottom: 20px">
                    <button class="bili-classifier-btn" id="addCustomGroup">添加自定义分组</button>
                </div>
                <div id="customGroups"></div>
            `;
        }

        /** 生成默认分组部分 */
        generateDefaultGroupsSection() {
            const groupCount = Object.keys(this.tidGroups).length;
            return `
                <div id="defaultGroups">
                    <h4>视频分区列表 (${groupCount}个分区)</h4>
                    ${Object.entries(this.tidGroups).map(([tid, videos]) => `
                        <div class="bili-classifier-group tid-group" data-tid="${tid}">
                            <div class="bili-classifier-group-header">
                                <span>${videos[0].tname} (${videos.length}个视频)</span>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        }

        /** 生成页脚 */
        generateFooter() {
            return `
                <div class="bili-classifier-footer">
                    <div class="bili-classifier-links">
                        <a href="https://space.bilibili.com/484456494" target="_blank" class="bili-classifier-link-btn">我的B站主页</a>
                        <a href="https://github.com/RSLN-creator/T-UserScript" target="_blank" class="bili-classifier-link-btn">GitHub项目</a>
                    </div>
                    <div class="bili-classifier-footer-buttons">
                        <button class="bili-classifier-btn secondary" id="cancelClassify">取消</button>
                        <button class="bili-classifier-btn" id="startClassify">开始分类</button>
                    </div>
                </div>
            `;
        }

        /** 加载现有收藏夹 */
        async loadExistingFolders() {
            try {
                this.existingFolders = await apiService.getUserFavLists();
            } catch (error) {
                utils.log('获取收藏夹列表失败，将无法使用现有收藏夹功能', 'warning');
                this.existingFolders = [];
            }
        }

        /** 绑定事件（使用模态范围内查询，避免全局冲突） */
        bindEvents() {
            const modal = this.modal;
            const addBtn = modal.querySelector('#addCustomGroup');
            const startBtn = modal.querySelector('#startClassify');
            const cancelBtn = modal.querySelector('#cancelClassify');

            if (addBtn) addBtn.addEventListener('click', () => this.addCustomGroup());
            if (startBtn) startBtn.addEventListener('click', () => this.startClassify());
            if (cancelBtn) cancelBtn.addEventListener('click', () => this.cancel());
        }

        /** 添加自定义分组 */
        addCustomGroup() {
            const groupDiv = document.createElement('div');
            groupDiv.className = 'bili-classifier-group custom-group';
            groupDiv.innerHTML = this.generateCustomGroupHTML();
            const container = this.modal.querySelector('#customGroups');
            container && container.appendChild(groupDiv);
            this.bindCustomGroupEvents(groupDiv);
        }

        /** 生成自定义分组HTML */
        generateCustomGroupHTML() {
            const tidOptions = Object.entries(this.tidGroups)
                .map(([tid, videos]) => `
                    <label class="bili-classifier-checkbox-label">
                        <input type="checkbox" class="bili-classifier-checkbox" value="${tid}">
                        ${videos[0].tname} (${videos.length}个视频)
                    </label>
                `).join('');

            return `
                <div class="bili-classifier-group-header">
                    <input type="text" class="bili-classifier-input folder-name" placeholder="新收藏夹名称">
                    <button class="bili-classifier-btn secondary use-existing">使用现有收藏夹</button>
                    <button class="bili-classifier-btn danger remove-group">删除分组</button>
                </div>
                <div class="bili-classifier-checkbox-group tid-options">
                    ${tidOptions}
                </div>
            `;
        }

        /** 绑定自定义分组事件（使用 group 范围查询） */
        bindCustomGroupEvents(groupDiv) {
            const useBtn = groupDiv.querySelector('.use-existing');
            const removeBtn = groupDiv.querySelector('.remove-group');

            if (useBtn) {
                useBtn.addEventListener('click', (e) => {
                    this.toggleFolderInput(e.target);
                });
            }
            if (removeBtn) {
                removeBtn.addEventListener('click', () => {
                    groupDiv.remove();
                });
            }
        }

        /** 切换文件夹输入类型（在分组内查找并替换） */
        toggleFolderInput(button) {
            const group = button.closest('.custom-group');
            const input = group.querySelector('.folder-name');
            const select = group.querySelector('select');

            if (input) {
                const newSelect = document.createElement('select');
                newSelect.className = 'bili-classifier-select';
                newSelect.innerHTML = `
                    <option value="">选择现有收藏夹</option>
                    ${this.existingFolders.map(f =>
                        `<option value="${f.id}">${f.title}</option>`
                    ).join('')}
                `;
                input.parentNode.replaceChild(newSelect, input);
                button.textContent = '创建新收藏夹';
            } else if (select) {
                const newInput = document.createElement('input');
                newInput.type = 'text';
                newInput.className = 'bili-classifier-input folder-name';
                newInput.placeholder = '新收藏夹名称';
                select.parentNode.replaceChild(newInput, select);
                button.textContent = '使用现有收藏夹';
            }
        }

        /** 开始分类 */
        startClassify() {
            const config = this.collectConfig();
            this.modal.remove();
            this.resolve(config);
        }

        /** 收集配置（范围查询） */
        collectConfig() {
            const modal = this.modal;
            const config = {
                custom: [],
                default: {},
                operationMode: modal.querySelector('input[name="operationMode"]:checked')?.value || 'copy',
                autoClassifyUnassigned: !!modal.querySelector('#autoClassifyUnassigned')?.checked
            };

            modal.querySelectorAll('.custom-group').forEach(group => {
                const nameInput = group.querySelector('.folder-name, select');
                const selectedTids = Array.from(group.querySelectorAll('input[type="checkbox"]:checked'))
                    .map(cb => cb.value);

                if (selectedTids.length > 0 && nameInput && (nameInput.value || (nameInput.tagName === 'SELECT' && nameInput.value))) {
                    const isSelect = nameInput.tagName === 'SELECT';
                    config.custom.push({
                        name: isSelect ? nameInput.options[nameInput.selectedIndex].text : nameInput.value,
                        isExisting: isSelect,
                        fid: isSelect ? nameInput.value : null,
                        tids: selectedTids
                    });
                }
            });

            if (config.autoClassifyUnassigned) {
                Object.keys(this.tidGroups).forEach(tid => {
                    if (!config.custom.some(g => g.tids.includes(tid))) {
                        config.default[tid] = this.tidGroups[tid][0].tname;
                    }
                });
            }

            return config;
        }

        /** 取消操作 */
        cancel() {
            this.modal.remove();
            this.reject(new Error('用户取消操作'));
        }
    }

    // --- 分类处理器 ---
    class ClassifyProcessor {
        constructor() {
            this.sourceFid = new URL(location.href).searchParams.get('fid');
            this.totalProcessed = 0;
            this.skippedVideos = 0;
        }

        /** 执行分类流程 */
        async process() {
            if (!this.sourceFid) {
                throw new Error('未找到收藏夹ID，请在具体的收藏夹页面运行脚本。');
            }

            try {
                utils.log('步骤 1/3: 开始获取收藏夹视频详情...');
                const videos = await this.getVideosWithProgress();

                if (!videos.length) {
                    alert('该收藏夹内没有找到有效视频。');
                    return;
                }

                utils.log('步骤 2/3: 获取完成，共找到有效视频');
                const tidGroups = this.groupVideosByTid(videos);
                const userConfig = await this.showConfigModal(tidGroups);

                utils.log('步骤 3/3: 开始执行分类操作...');
                await this.executeClassification(userConfig, tidGroups, videos.length);

                this.showCompletionMessage();

            } catch (error) {
                this.handleError(error);
            } finally {
                this.cleanup();
            }
        }

        /** 获取视频数据并显示进度 */
        async getVideosWithProgress() {
            // 初始化读取进度卡片，显示已获取数量（total 未知，写为 ?）
            uiManager.createProgressDiv('reading-progress', `正在读取视频 · 已获取 0 个视频`);

            try {
                // 传入 progress 回调，每获取一个视频更新已获取数量显示
                const videos = await apiService.getFavVideos(this.sourceFid, CONFIG.BATCH_SIZE, 1, [], (count) => {
                    uiManager.updateProgress('reading-progress', `正在读取视频 · 已获取 ${count} 个视频`, count, 0);
                });

                uiManager.removeProgress('reading-progress');
                return videos;
            } catch (error) {
                uiManager.removeProgress('reading-progress');
                throw error;
            }
        }

        /** 按分区分组视频 */
        groupVideosByTid(videos) {
            const groups = {};
            videos.forEach(video => {
                if (!groups[video.tid]) groups[video.tid] = [];
                groups[video.tid].push(video);
            });
            return groups;
        }

        /** 显示配置模态框 */
        async showConfigModal(tidGroups) {
            const modal = new ConfigModal(tidGroups);
            return await modal.create();
        }

        /** 执行分类操作 */
        async executeClassification(userConfig, tidGroups, totalVideos) {
            uiManager.updateProgress('fav-progress', '正在准备分组和创建收藏夹...', 0, totalVideos);

            for (const group of userConfig.custom) {
                await this.processCustomGroup(group, tidGroups, userConfig.operationMode, totalVideos);
            }

            if (userConfig.autoClassifyUnassigned) {
                for (const [tid, folderName] of Object.entries(userConfig.default)) {
                    await this.processDefaultGroup(tid, folderName, tidGroups, userConfig.operationMode, totalVideos);
                }
            }
        }

        /** 处理自定义分组 */
        async processCustomGroup(group, tidGroups, operationMode, totalVideos) {
            const { targetFid, folderName } = await this.getOrCreateFolder(group);

            for (const tid of group.tids) {
                if (tidGroups[tid]) {
                    await this.processVideosInGroup(tidGroups[tid], targetFid, folderName, operationMode, totalVideos);
                }
            }
        }

        /** 处理默认分组 */
        async processDefaultGroup(tid, folderName, tidGroups, operationMode, totalVideos) {
            const targetFid = await this.findOrCreateFolder(folderName);

            if (tidGroups[tid]) {
                await this.processVideosInGroup(tidGroups[tid], targetFid, folderName, operationMode, totalVideos);
            }
        }

        /** 获取或创建文件夹 */
        async getOrCreateFolder(group) {
            let targetFid;
            let folderName = group.name;

            if (group.isExisting) {
                targetFid = group.fid;
                utils.log(`使用现有收藏夹: "${folderName}"`, 'info');
            } else {
                targetFid = await this.findOrCreateFolder(folderName);
            }

            return { targetFid, folderName };
        }

        /** 查找或创建文件夹 */
        async findOrCreateFolder(folderName) {
            const existingFolders = await apiService.getUserFavLists();
            const existingFolder = existingFolders.find(f => f.title && f.title.trim() === folderName.trim());

            if (existingFolder) {
                utils.log(`使用现有收藏夹: "${folderName}"`, 'info');
                return existingFolder.id;
            } else {
                const newFid = await apiService.createFolder(folderName);
                utils.log(`创建新收藏夹: "${folderName}"`, 'success');
                await utils.delay(500);
                return newFid;
            }
        }

        /** 处理组内视频 */
        async processVideosInGroup(videos, targetFid, folderName, operationMode, totalVideos) {
            for (const video of videos) {
                try {
                    await apiService.addToFav(video.aid, targetFid);

                    if (operationMode === 'move') {
                        await apiService.removeFromFav(video.aid, this.sourceFid);
                    }

                    this.totalProcessed++;
                    utils.log(`处理视频成功: ${video.title} → "${folderName}"`, 'success');

                } catch (error) {
                    utils.log(`处理视频失败: ${video.title} - ${error.message}`, 'error');
                    this.skippedVideos++;
                }

                uiManager.updateProgress(
                    'fav-progress',
                    `正在处理视频到"${folderName}"`,
                    this.totalProcessed,
                    totalVideos,
                    this.skippedVideos
                );

                await utils.delay(CONFIG.RATE_LIMIT_DELAY);
            }
        }

        /** 显示完成消息 */
        showCompletionMessage() {
            utils.log(`分类完成！处理了 ${this.totalProcessed} 个视频，跳过了 ${this.skippedVideos} 个视频`, 'success');
            alert(`分类完成！处理了 ${this.totalProcessed} 个视频，跳过了 ${this.skippedVideos} 个视频`);

            if (document.querySelector('input[name="operationMode"]:checked')?.value === 'move') {
                setTimeout(() => location.reload(), 1000);
            }
        }

        /** 处理错误 */
        handleError(error) {
            utils.log(`操作失败: ${error.message}`, 'error');
            alert('操作失败：' + error.message);
        }

        /** 清理资源 */
        cleanup() {
            uiManager.removeProgress('fav-progress');
            uiManager.removeProgress('reading-progress');
        }
    }

    // --- 初始化 ---
    function init() {
        // 创建触发按钮
        const btnContainer = document.createElement('div');
        btnContainer.className = 'bili-classifier-float-btn';

        const btn = document.createElement('button');
        btn.className = 'bili-classifier-btn';
        btn.textContent = '按分区分类';
        btn.addEventListener('click', () => {
            new ClassifyProcessor().process();
        });

        const links = document.createElement('div');
        links.className = 'bili-classifier-float-links';
        links.innerHTML = `
            <a href="https://space.bilibili.com/484456494" target="_blank" class="bili-classifier-link-btn">我的B站</a>
            <a href="https://github.com/RSLN-creator/T-UserScript" target="_blank" class="bili-classifier-link-btn">GitHub</a>
        `;

        btnContainer.appendChild(btn);
        btnContainer.appendChild(links);
        document.body.appendChild(btnContainer);
    }

    // 启动脚本
    init();
})();