// ==UserScript==
// @name         Bilibili收藏夹自动分类 (批量处理版 - 优化版)
// @namespace    http://tampermonkey.net/
// @version      2.2
// @description  B站收藏夹视频自动分类，采用批量API，高效稳定，优化速率限制和进度显示，!!!原脚本来源于 https://github.com/jqwgt
// @author       RSYHN         https://space.bilibili.com/484456494?spm_id_from=333.1007.0.0
// @license      GPL-3.0-or-later
// @match        *://space.bilibili.com/*/favlist*
// @grant        GM_xmlhttpRequest
// @grant        GM_addStyle
// @connect      api.bilibili.com
// @note         原脚本来源于 https://github.com/jqwgt
// ==/UserScript==

(function() {
    'use strict';

    // --- 样式部分 (已包含按钮样式) ---
    GM_addStyle(`
        .bili-classifier-container {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            color: #222;
        }
        .bili-classifier-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            z-index: 10000;
            max-height: 80vh;
            overflow-y: auto;
            width: 700px;
            max-width: 90vw;
            display: flex;
            flex-direction: column;
        }
        .bili-classifier-modal h3 {
            margin-top: 0;
            color: #00a1d6;
            font-size: 1.5em;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        .bili-classifier-btn {
            padding: 10px 16px;
            background: #00a1d6;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s;
            margin-right: 10px;
        }
        .bili-classifier-btn:hover {
            background: #0087b4;
            transform: translateY(-1px);
        }
        .bili-classifier-btn.secondary {
            background: #f0f0f0;
            color: #666;
        }
        .bili-classifier-btn.secondary:hover {
            background: #e0e0e0;
        }
        .bili-classifier-btn.danger {
            background: #ff4d4f;
        }
        .bili-classifier-btn.danger:hover {
            background: #ff7875;
        }
        .bili-classifier-group {
            margin: 15px 0;
            padding: 15px;
            border: 1px solid #eee;
            border-radius: 8px;
            background: #fafafa;
        }
        .bili-classifier-group-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        .bili-classifier-input {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            width: 200px;
            margin-right: 10px;
        }
        .bili-classifier-select {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            width: 220px;
            margin-right: 10px;
        }
        .bili-classifier-checkbox-group {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 8px;
            margin-top: 10px;
        }
        .bili-classifier-checkbox-label {
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        .bili-classifier-checkbox {
            margin-right: 8px;
        }
        .bili-classifier-footer {
            display: flex;
            justify-content: flex-end;
            padding-top: 15px;
            border-top: 1px solid #eee;
            margin-top: auto; /* 固定到底部 */
        }
        .bili-classifier-progress {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background: white;
            padding: 15px 20px;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            z-index: 10000;
            min-width: 250px;
        }
        .bili-classifier-progress-bar {
            width: 100%;
            height: 10px;
            background: #f0f0f0;
            border-radius: 5px;
            margin: 8px 0;
            overflow: hidden;
        }
        .bili-classifier-progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #00a1d6, #00c4ff);
            border-radius: 5px;
            transition: width 0.3s;
        }
        .bili-classifier-float-btn {
            position: fixed;
            right: 30px;
            bottom: 30px;
            z-index: 9999;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .bili-classifier-links {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        .bili-classifier-link-btn {
            padding: 8px 12px;
            background: #f0f0f0;
            color: #666;
            border-radius: 4px;
            text-decoration: none;
            font-size: 12px;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        .bili-classifier-link-btn:hover {
            background: #e0e0e0;
        }
        .bili-classifier-radio-group {
            display: flex;
            gap: 15px;
            margin: 15px 0;
        }
        .bili-classifier-radio-label {
            display: flex;
            align-items: center;
            gap: 5px;
            cursor: pointer;
        }
        .bili-classifier-option-group {
            margin: 15px 0;
            padding: 15px;
            border: 1px solid #eee;
            border-radius: 8px;
        }
        /* 内容区域，确保footer可以固定到底部 */
        .bili-classifier-content {
            flex: 1;
            overflow-y: auto;
        }
    `);

    // --- 全局状态和辅助函数 ---

    // 关键延迟时间（毫秒）
    const RATE_LIMIT_DELAY = 2000; // 批量处理后的强制延迟
    const INFO_FETCH_DELAY = 300;  // 获取单个视频信息后的延迟

    // 进度跟踪变量 (解决作用域问题)
    let totalVideos = 0;
    let totalProcessed = 0;
    let skippedVideos = 0;

    // 获取CSRF令牌
    function getCsrf() {
        return document.cookie.match(/bili_jct=([^;]+)/)?.[1] || '';
    }

    // 添加日志功能
    function log(message, type = 'info') {
        const styles = {
            info: 'color: #00a1d6',
            error: 'color: #ff0000',
            success: 'color: #00ff00'
        };
        console.log(`%c[收藏夹分类] ${message}`, styles[type]);
    }

    // 获取用户收藏夹
    async function getUserFavLists() {
        const mid = window.location.pathname.split('/')[1];
        return new Promise((resolve, reject) => {
            GM_xmlhttpRequest({
                method: 'GET',
                url: `https://api.bilibili.com/x/v3/fav/folder/created/list-all?up_mid=${mid}`,
                responseType: 'json',
                onload: function(response) {
                    resolve(response.response.data?.list || []);
                },
                onerror: reject
            });
        });
    }

    // 查找现有收藏夹ID（按名称精确匹配）
    async function findExistingFolderId(folderName) {
        const folders = await getUserFavLists();
        const folder = folders.find(f => f.title.trim() === folderName.trim());
        return folder ? folder.id : null;
    }

    // 获取视频详细信息 (精简日志)
    async function getVideoInfo(aid) {
        return new Promise((resolve, reject) => {
            GM_xmlhttpRequest({
                method: 'GET',
                url: `https://api.bilibili.com/x/web-interface/view?aid=${aid}`,
                responseType: 'json',
                onload: function(response) {
                    if (response.response.code !== 0 || !response.response.data) {
                        log(`视频 ${aid} 可能已失效或无法访问，跳过`, 'error');
                        reject(new Error(`视频 ${aid} 无法访问`));
                        return;
                    }
                    const data = response.response.data;
                    log(`获取视频 ${aid} 详情: ${data.title}`, 'info');
                    resolve(data);
                },
                onerror: function(error) {
                    log(`视频 ${aid} 信息获取失败，跳过`, 'error');
                    reject(error);
                }
            });
        });
    }

    // 获取收藏夹中的视频 (增强进度跟踪)
    async function getFavVideos(mediaId, ps = 20, pn = 1, videos = []) {
        if (!document.getElementById('reading-progress')) createReadingProgressDiv();

        return new Promise((resolve, reject) => {
            GM_xmlhttpRequest({
                method: 'GET',
                url: `https://api.bilibili.com/x/v3/fav/resource/list?media_id=${mediaId}&pn=${pn}&ps=${ps}&order=mtime&type=0&platform=web`,
                responseType: 'json',
                onload: async function(response) {
                    const data = response.response.data;

                    if (!data || !data.medias) {
                        document.getElementById('reading-progress')?.remove();
                        reject('获取视频列表失败');
                        return;
                    }

                    let processedPageCount = 0;
                    const totalEstimate = data.info?.media_count || (pn * ps) + data.medias.length;

                    for (const video of data.medias) {
                        try {
                            const videoInfo = await getVideoInfo(video.id);
                            videos.push({
                                aid: video.id,
                                title: video.title,
                                tid: videoInfo.tid,
                                tname: videoInfo.tname,
                                play: videoInfo.stat.view
                            });
                        } catch (err) {
                            // 视频信息获取失败，跳过，不计入 videos 数组
                        } finally {
                            processedPageCount++;
                            // 实时更新读取进度
                            updateReadingProgress(`正在读取视频，已获取 ${videos.length} 个。当前页处理进度 ${processedPageCount}/${data.medias.length}`, videos.length, totalEstimate);
                            await new Promise(r => setTimeout(r, INFO_FETCH_DELAY)); // 保持获取单个详情的延迟
                        }
                    }

                    if (data.has_more) {
                        await getFavVideos(mediaId, ps, pn + 1, videos).then(resolve);
                    } else {
                        document.getElementById('reading-progress')?.remove();
                        resolve(videos);
                    }
                },
                onerror: reject
            });
        });
    }

    // 创建新收藏夹
    async function createFolder(title) {
        // 先检查是否已有同名收藏夹
        const existingId = await findExistingFolderId(title);
        if (existingId) {
            log(`已存在同名收藏夹 "${title}"，将使用现有收藏夹`, 'info');
            return existingId;
        }

        // 如果不存在则创建新的
        return new Promise((resolve, reject) => {
            GM_xmlhttpRequest({
                method: 'POST',
                url: 'https://api.bilibili.com/x/v3/fav/folder/add',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                data: `csrf=${getCsrf()}&title=${encodeURIComponent(title)}&jsonp=jsonp`,
                responseType: 'json',
                onload: function(response) {
                    if (response.response && response.response.code === 0) {
                        log(`成功创建收藏夹: ${title}`, 'success');
                        resolve(response.response.data.id);
                    } else {
                        reject(new Error(response.response.message || '创建收藏夹失败'));
                    }
                },
                onerror: reject
            });
        });
    }

    // 批量处理函数 (移动或复制)
    async function batchDealFav(aids, targetFid, sourceFid = null) {
        // aids: 需要移动/复制的视频ID数组, targetFid: 目标收藏夹ID, sourceFid: 源收藏夹ID (移动时需要)
        const resources = aids.map(aid => `${aid}:2`).join(',');

        let data = `csrf=${getCsrf()}&rid=0&type=2&add_media_ids=${targetFid}&resources=${resources}&jsonp=jsonp`;

        if (sourceFid) {
            data += `&del_media_ids=${sourceFid}`; // 移动操作
        }

        return new Promise((resolve, reject) => {
            GM_xmlhttpRequest({
                method: 'POST',
                url: 'https://api.bilibili.com/x/v3/fav/resource/batch-deal',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                data: data,
                responseType: 'json',
                onload: function(response) {
                    if (response.response && response.response.code === 0) {
                        resolve(response.response);
                    } else {
                        // 错误码 -101 (未登录) / 错误码 -400 (请求错误)
                        reject(new Error(response.response.message || `批量处理失败，Code: ${response.response.code}`));
                    }
                },
                onerror: reject
            });
        });
    }

    // --- 界面和进度条函数 ---

    // 创建和更新读取视频进度显示
    function createReadingProgressDiv() {
        const div = document.createElement('div');
        div.id = 'reading-progress';
        div.className = 'bili-classifier-progress';
        div.innerHTML = `<div>正在读取视频...</div><div class="bili-classifier-progress-bar"><div class="bili-classifier-progress-fill" style="width: 0%"></div></div><div id="reading-counts">0/0</div>`;
        document.body.appendChild(div);
        return div;
    }

    function updateReadingProgress(message, currentCount, totalEstimate) {
        const progressDiv = document.getElementById('reading-progress') || createReadingProgressDiv();
        progressDiv.querySelector('div:first-child').textContent = message;
        progressDiv.querySelector('.bili-classifier-progress-fill').style.width = `${(currentCount/totalEstimate)*100}%`;
        progressDiv.querySelector('#reading-counts').textContent = `${currentCount}/${totalEstimate}`;
    }

    // 创建和更新处理进度 (使用全局变量)
    function createProgressDiv() {
        const div = document.createElement('div');
        div.id = 'fav-progress';
        div.className = 'bili-classifier-progress';
        div.innerHTML = `<div>正在处理...</div><div class="bili-classifier-progress-bar"><div class="bili-classifier-progress-fill" style="width: 0%"></div></div><div id="progress-counts">0/0</div>`;
        document.body.appendChild(div);
        return div;
    }

    // 解决 totalProcessed is not defined 的关键：使用外部定义的全局变量
    function updateProgress(message) {
        const progressDiv = document.getElementById('fav-progress') || createProgressDiv();
        progressDiv.querySelector('div:first-child').textContent = message;
        progressDiv.querySelector('.bili-classifier-progress-fill').style.width = `${(totalProcessed/totalVideos)*100}%`;
        progressDiv.querySelector('#progress-counts').textContent = `${totalProcessed}/${totalVideos}${skippedVideos > 0 ? ` (跳过${skippedVideos}个)` : ''}`;
    }

    // 创建配置界面
    function createConfigUI(tidGroups) {
        const modal = document.createElement('div');
        modal.className = 'bili-classifier-container bili-classifier-modal';

        let html = `
            <h3>收藏夹自动分类</h3>

            <div class="bili-classifier-content">
                <div class="bili-classifier-radio-group">
                    <label class="bili-classifier-radio-label">
                        <input type="radio" name="operationMode" value="copy" checked> 复制模式
                    </label>
                    <label class="bili-classifier-radio-label">
                        <input type="radio" name="operationMode" value="move"> 移动模式 (将视频移出原收藏夹)
                    </label>
                </div>

                <div class="bili-classifier-option-group">
                    <label class="bili-classifier-checkbox-label">
                        <input type="checkbox" id="autoClassifyUnassigned" checked>
                        对未自定义分组的视频自动按分区分类 (推荐)
                    </label>
                </div>

                <div style="margin-bottom: 20px">
                    <button class="bili-classifier-btn" id="addCustomGroup">添加自定义分组</button>
                </div>
                <div id="customGroups"></div>
                <div id="defaultGroups">
                    <h4>视频分区列表 (${Object.keys(tidGroups).length}个分区)</h4>
        `;

        // 显示默认分区列表
        Object.entries(tidGroups).forEach(([tid, videos]) => {
            html += `
                <div class="bili-classifier-group tid-group" data-tid="${tid}">
                    <div class="bili-classifier-group-header">
                        <span>${videos[0].tname} (${videos.length}个视频)</span>
                    </div>
                </div>
            `;
        });

        html += `
                </div>
            </div>

            <div class="bili-classifier-footer">
                <button class="bili-classifier-btn secondary" id="cancelClassify">取消</button>
                <button class="bili-classifier-btn" id="startClassify">开始分类</button>
            </div>

            <div class="bili-classifier-links">
                <a href="https://space.bilibili.com/484456494?spm_id_from=333.1007.0.0" target="_blank" class="bili-classifier-link-btn">我的B站主页</a>
                <a href="https://github.com/RSLN-creator/T-UserScript" target="_blank" class="bili-classifier-link-btn">GitHub项目</a>
            </div>
        `;

        modal.innerHTML = html;
        document.body.appendChild(modal);

        let existingFolders = [];
        getUserFavLists().then(folders => {
            existingFolders = folders;
        });

        // 绑定添加自定义分组事件
        document.getElementById('addCustomGroup').onclick = async () => {
            const groupDiv = document.createElement('div');
            groupDiv.className = 'bili-classifier-group custom-group';

            const tidOptions = Object.entries(tidGroups)
                .map(([tid, videos]) => `
                    <label class="bili-classifier-checkbox-label">
                        <input type="checkbox" class="bili-classifier-checkbox" value="${tid}">
                        ${videos[0].tname} (${videos.length}个视频)
                    </label>
                `).join('');

            groupDiv.innerHTML = `
                <div class="bili-classifier-group-header">
                    <input type="text" class="bili-classifier-input folder-name" placeholder="新收藏夹名称">
                    <button class="bili-classifier-btn secondary use-existing">使用现有收藏夹</button>
                    <button class="bili-classifier-btn danger remove-group">删除分组</button>
                </div>
                <div class="bili-classifier-checkbox-group tid-options">
                    ${tidOptions}
                </div>
            `;

            document.getElementById('customGroups').appendChild(groupDiv);

            // 绑定使用现有收藏夹事件 - 改进版
            const bindToggleEvent = (button) => {
                button.onclick = (e) => {
                    const group = button.closest('.custom-group');
                    const input = group.querySelector('.folder-name');
                    const select = group.querySelector('select');

                    if (input) {
                        // 从输入框切换到下拉选择
                        const newSelect = document.createElement('select');
                        newSelect.className = 'bili-classifier-select';
                        newSelect.innerHTML = `<option value="">选择现有收藏夹</option>${existingFolders.map(f => `<option value="${f.id}">${f.title}</option>`).join('')}`;

                        input.parentNode.replaceChild(newSelect, input);
                        button.textContent = '创建新收藏夹';
                        bindToggleEvent(button); // 重新绑定事件
                    } else if (select) {
                        // 从下拉选择切换到输入框
                        const newInput = document.createElement('input');
                        newInput.type = 'text';
                        newInput.className = 'bili-classifier-input folder-name';
                        newInput.placeholder = '新收藏夹名称';

                        select.parentNode.replaceChild(newInput, select);
                        button.textContent = '使用现有收藏夹';
                        bindToggleEvent(button); // 重新绑定事件
                    }
                };
            };

            // 初始绑定事件
            bindToggleEvent(groupDiv.querySelector('.use-existing'));

            // 绑定删除事件
            groupDiv.querySelector('.remove-group').onclick = () => {
                groupDiv.remove();
            };
        };


        return new Promise((resolve, reject) => {
            // 绑定开始分类事件
            document.getElementById('startClassify').onclick = () => {
                const config = {
                    custom: [],
                    default: {},
                    operationMode: document.querySelector('input[name="operationMode"]:checked').value,
                    autoClassifyUnassigned: document.getElementById('autoClassifyUnassigned').checked
                };

                // 收集自定义分组配置
                document.querySelectorAll('.custom-group').forEach(group => {
                    const nameInput = group.querySelector('.folder-name, select');
                    const selectedTids = Array.from(group.querySelectorAll('input[type="checkbox"]:checked')).map(cb => cb.value);
                    if (selectedTids.length > 0 && nameInput.value) {
                        config.custom.push({
                            name: nameInput.tagName === 'SELECT' ? nameInput.options[nameInput.selectedIndex].text : nameInput.value,
                            isExisting: nameInput.tagName === 'SELECT',
                            fid: nameInput.tagName === 'SELECT' ? nameInput.value : null,
                            tids: selectedTids
                        });
                    }
                });

                // 准备自动分区列表
                if (config.autoClassifyUnassigned) {
                    Object.keys(tidGroups).forEach(tid => {
                        // 只有未被任何自定义分组包含的分区才进行自动创建
                        if (!config.custom.some(g => g.tids.includes(tid))) {
                            config.default[tid] = tidGroups[tid][0].tname;
                        }
                    });
                }

                modal.remove();
                resolve(config);
            };

            document.getElementById('cancelClassify').onclick = () => {
                modal.remove();
                reject(new Error('用户取消操作'));
            };
        });
    }

    // --- 主处理流程 (已优化) ---
    async function processClassify() {
        // 重置全局进度状态
        totalProcessed = 0;
        totalVideos = 0;
        skippedVideos = 0;
        const sourceFid = new URL(location.href).searchParams.get('fid');

        try {
            if (!sourceFid) throw new Error('未找到收藏夹ID，请在具体的收藏夹页面运行脚本。');

            log('步骤 1/3: 开始获取收藏夹视频详情...');
            const videos = await getFavVideos(sourceFid);
            if (!videos.length) {
                alert('该收藏夹内没有找到有效视频。');
                return;
            }

            const tidGroups = {};
            videos.forEach(video => {
                if (!tidGroups[video.tid]) tidGroups[video.tid] = [];
                tidGroups[video.tid].push(video);
            });

            totalVideos = videos.length;
            log(`步骤 2/3: 获取完成，共找到 ${totalVideos} 个有效视频。`);
            const userConfig = await createConfigUI(tidGroups);

            const isMoveMode = userConfig.operationMode === 'move';

            log('步骤 3/3: 开始执行分类操作 (批量处理模式)...');
            updateProgress(`正在准备分组和创建收藏夹...`);

            // 统一处理所有分组（自定义和默认）
            const allGroups = [];
            let unassignedAids = new Set(videos.map(v => v.aid));

            // 1. 添加自定义分组
            for (const group of userConfig.custom) {
                const aidsToProcess = [];
                for (const tid of group.tids) {
                    if (tidGroups[tid]) {
                         tidGroups[tid].forEach(video => {
                             if(unassignedAids.has(video.aid)) {
                                 aidsToProcess.push(video.aid);
                                 // 从未分配集合中移除
                                 unassignedAids.delete(video.aid);
                             }
                         });
                    }
                }
                if (aidsToProcess.length > 0) {
                    allGroups.push({ name: group.name, aids: aidsToProcess, isExisting: group.isExisting, fid: group.fid });
                }
            }

            // 2. 添加默认分区自动分组 (只处理剩下的未分配视频)
            if (userConfig.autoClassifyUnassigned) {
                for (const [tid, folderName] of Object.entries(userConfig.default)) {
                    // 检查该分区是否还有未被自定义分组处理的视频
                    const aidsToProcess = tidGroups[tid]
                        .map(video => video.aid)
                        .filter(aid => unassignedAids.has(aid));

                    if (aidsToProcess.length > 0) {
                        allGroups.push({ name: folderName, aids: aidsToProcess, isExisting: false, fid: null });
                        // 从未分配集合中移除
                        aidsToProcess.forEach(aid => unassignedAids.delete(aid));
                    }
                }
            }

            // 3. 顺序执行所有分组处理 (避免速率限制)
            for (const group of allGroups) {
                let targetFid = group.fid;
                let folderNameToUse = group.name;

                // 获取或创建目标收藏夹
                if (!group.isExisting) {
                    // 检查是否存在同名收藏夹
                    const existingId = await findExistingFolderId(folderNameToUse);
                    if (existingId) {
                        targetFid = existingId;
                    } else {
                        // 不存在则创建新的
                        targetFid = await createFolder(folderNameToUse);
                    }
                    await new Promise(r => setTimeout(r, 500)); // 创建后稍等
                }

                // 批量处理
                updateProgress(`正在将 ${group.aids.length} 个视频处理到分组 "${folderNameToUse}"`);

                try {
                    await batchDealFav(group.aids, targetFid, isMoveMode ? sourceFid : null);
                    totalProcessed += group.aids.length;
                    log(`成功处理 ${group.aids.length} 个视频到 "${folderNameToUse}"`, 'success');
                } catch (error) {
                    skippedVideos += group.aids.length;
                    log(`处理到 "${folderNameToUse}" 的一批视频失败: ${error.message}，已全部跳过`, 'error');
                }

                updateProgress(`已处理 ${totalProcessed} / ${totalVideos}`);
                await new Promise(r => setTimeout(r, RATE_LIMIT_DELAY)); // **关键优化：强制延迟 2 秒**
            }

            document.getElementById('fav-progress')?.remove();
            log(`操作完成！成功处理 ${totalProcessed} 个视频，跳过 ${skippedVideos} 个`, 'success');
            alert(`分类完成！成功处理了 ${totalProcessed} 个视频，跳过了 ${skippedVideos} 个视频。\n（请刷新页面查看新收藏夹）`);
            if (isMoveMode) window.location.reload();

        } catch (error) {
            log(`操作失败: ${error.message}`, 'error');
            alert('操作失败：' + error.message);
            document.getElementById('fav-progress')?.remove();
            document.getElementById('reading-progress')?.remove();
        }
    }

    // 添加触发按钮和链接 (已恢复)
    function addButton() {
        const btnContainer = document.createElement('div');
        btnContainer.className = 'bili-classifier-float-btn';

        const btn = document.createElement('button');
        btn.className = 'bili-classifier-btn';
        btn.textContent = '按分区分类';
        btn.onclick = processClassify;

        // 按钮链接部分 (链接已更新)
        const links = document.createElement('div');
        links.className = 'bili-classifier-links';
        links.innerHTML = `
            <a href="https://space.bilibili.com/484456494?spm_id_from=333.1007.0.0" target="_blank" class="bili-classifier-link-btn">我的B站</a>
            <a href="https://github.com/RSLN-creator/T-UserScript" target="_blank" class="bili-classifier-link-btn">GitHub</a>
        `;

        btnContainer.appendChild(btn);
        btnContainer.appendChild(links);
        document.body.appendChild(btnContainer);
    }

    // 初始化
    addButton();
})();
