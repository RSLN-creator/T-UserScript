// ==UserScript==
// @name         Bilibili收藏夹自动分类 (批量处理版 - 优化版)2.3
// @namespace    http://tampermonkey.net/
// @version      2.3
// @description  B站收藏夹视频自动分类，采用批量API，高效稳定，优化速率限制和进度显示，!!!原脚本来源于 https://github.com/jqwgt
// @author       RSYHN         https://space.bilibili.com/484456494?spm_id_from=333.1007.0.0
// @license      GPL-3.0-or-later
// @match        *://space.bilibili.com/*/favlist*
// @grant        GM_xmlhttpRequest
// @grant        GM_addStyle
// @connect      api.bilibili.com
// @note         原脚本来源于 https://github.com/jqwgt
// ==/UserScript==

(function() {
    'use strict';

    // --- 样式部分 ---
    GM_addStyle(`
        .bili-classifier-container {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            color: #222;
        }
        .bili-classifier-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            z-index: 10000;
            max-height: 80vh;
            overflow-y: auto;
            width: 700px;
            max-width: 90vw;
            display: flex;
            flex-direction: column;
        }
        .bili-classifier-modal h3 {
            margin-top: 0;
            color: #00a1d6;
            font-size: 1.5em;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        .bili-classifier-btn {
            padding: 8px 14px;
            background: #00a1d6;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 13px;
            transition: all 0.2s;
            margin-right: 8px;
            height: 34px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .bili-classifier-btn:hover {
            background: #0087b4;
            transform: translateY(-1px);
        }
        .bili-classifier-btn.secondary {
            background: #f0f0f0;
            color: #666;
        }
        .bili-classifier-btn.secondary:hover {
            background: #e0e0e0;
        }
        .bili-classifier-btn.danger {
            background: #ff4d4f;
        }
        .bili-classifier-btn.danger:hover {
            background: #ff7875;
        }
        .bili-classifier-group {
            margin: 15px 0;
            padding: 15px;
            border: 1px solid #eee;
            border-radius: 8px;
            background: #fafafa;
        }
        .bili-classifier-group-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        .bili-classifier-input {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            width: 200px;
            margin-right: 10px;
        }
        .bili-classifier-select {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            width: 220px;
            margin-right: 10px;
        }
        .bili-classifier-checkbox-group {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 8px;
            margin-top: 10px;
        }
        .bili-classifier-checkbox-label {
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        .bili-classifier-checkbox {
            margin-right: 8px;
        }
        .bili-classifier-footer {
            display: flex;
            justify-content: flex-end;
            padding-top: 15px;
            border-top: 1px solid #eee;
            margin-top: auto;
        }
        .bili-classifier-progress {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background: white;
            padding: 15px 20px;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            z-index: 10000;
            min-width: 250px;
        }
        .bili-classifier-progress-bar {
            width: 100%;
            height: 10px;
            background: #f0f0f0;
            border-radius: 5px;
            margin: 8px 0;
            overflow: hidden;
        }
        .bili-classifier-progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #00a1d6, #00c4ff);
            border-radius: 5px;
            transition: width 0.3s;
        }
        .bili-classifier-float-btn {
            position: fixed;
            right: 30px;
            bottom: 30px;
            z-index: 9999;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .bili-classifier-links {
            display: flex;
            gap: 10px;
            margin-top: 20px;
            justify-content: flex-end;
        }
        .bili-classifier-link-btn {
            padding: 6px 10px;
            background: #f0f0f0;
            color: #666;
            border-radius: 4px;
            text-decoration: none;
            font-size: 12px;
            display: flex;
            align-items: center;
            gap: 5px;
            height: 28px;
        }
        .bili-classifier-link-btn:hover {
            background: #e0e0e0;
        }
        .bili-classifier-radio-group {
            display: flex;
            gap: 15px;
            margin: 15px 0;
        }
        .bili-classifier-radio-label {
            display: flex;
            align-items: center;
            gap: 5px;
            cursor: pointer;
        }
        .bili-classifier-option-group {
            margin: 15px 0;
            padding: 15px;
            border: 1px solid #eee;
            border-radius: 8px;
        }
        .bili-classifier-content {
            flex: 1;
            overflow-y: auto;
        }
        .bili-classifier-footer-buttons {
            display: flex;
            gap: 10px;
            align-items: center;
        }
    `);

    // --- 全局状态和辅助函数 ---

    const RATE_LIMIT_DELAY = 300;
    const INFO_FETCH_DELAY = 300;

    let totalVideos = 0;
    let totalProcessed = 0;
    let skippedVideos = 0;

    function getCsrf() {
        return document.cookie.match(/bili_jct=([^;]+)/)?.[1] || '';
    }

    function log(message, type = 'info') {
        const styles = {
            info: 'color: #00a1d6',
            error: 'color: #ff0000',
            success: 'color: #00ff00'
        };
        console.log(`%c[收藏夹分类] ${message}`, styles[type]);
    }

    async function getUserFavLists() {
        const mid = window.location.pathname.split('/')[1];
        return new Promise((resolve, reject) => {
            GM_xmlhttpRequest({
                method: 'GET',
                url: `https://api.bilibili.com/x/v3/fav/folder/created/list-all?up_mid=${mid}`,
                responseType: 'json',
                onload: function(response) {
                    if (response.status === 200 && response.response && response.response.data) {
                        resolve(response.response.data?.list || []);
                    } else {
                        reject(new Error(`获取收藏夹列表失败: ${response.status}`));
                    }
                },
                onerror: function(error) {
                    reject(new Error(`网络错误: ${error.statusText}`));
                }
            });
        });
    }

    // 精确匹配收藏夹名称
    async function findExistingFolderId(folderName) {
        const folders = await getUserFavLists();
        const folder = folders.find(f => f.title.trim() === folderName.trim());
        return folder ? folder.id : null;
    }

    async function getVideoInfo(aid) {
        return new Promise((resolve, reject) => {
            GM_xmlhttpRequest({
                method: 'GET',
                url: `https://api.bilibili.com/x/web-interface/view?aid=${aid}`,
                responseType: 'json',
                onload: function(response) {
                    if (response.status === 200 && response.response && response.response.data) {
                        const data = response.response.data;
                        log(`获取视频 ${aid} 详细信息:`, 'info');
                        console.table({
                            标题: data.title,
                            分区ID: data.tid,
                            分区名: data.tname,
                            播放量: data.stat.view,
                        });
                        resolve(data);
                    } else {
                        const errorMsg = response.response ? response.response.message : '视频信息获取失败';
                        log(`视频 ${aid} 可能已失效或无法访问: ${errorMsg}`, 'error');
                        reject(new Error(`视频 ${aid} 可能已失效或无法访问: ${errorMsg}`));
                    }
                },
                onerror: function(error) {
                    log(`视频 ${aid} 信息获取失败，跳过处理`, 'error');
                    reject(new Error(`网络错误: ${error.statusText}`));
                }
            });
        });
    }

    async function getFavVideos(mediaId, ps = 20, pn = 1, videos = []) {
        if (!document.getElementById('reading-progress')) {
            createReadingProgressDiv();
        }
        return new Promise((resolve, reject) => {
            GM_xmlhttpRequest({
                method: 'GET',
                url: `https://api.bilibili.com/x/v3/fav/resource/list?media_id=${mediaId}&pn=${pn}&ps=${ps}&order=mtime&type=0&platform=web`,
                responseType: 'json',
                onload: async function(response) {
                    if (response.status !== 200 || !response.response || !response.response.data) {
                        reject(new Error(`获取视频列表失败: ${response.status}`));
                        return;
                    }

                    const data = response.response.data;

                    if (!data.medias) {
                        reject('获取视频列表失败');
                        return;
                    }

                    let currentCount = videos.length;
                    let processedCount = 0;

                    for (let video of data.medias) {
                        try {
                            const videoInfo = await getVideoInfo(video.id);
                            videos.push({
                                aid: video.id,
                                title: video.title,
                                tid: videoInfo.tid,
                                tname: videoInfo.tname,
                                play: videoInfo.stat.view
                            });
                            currentCount++;
                        } catch (err) {
                            log(`跳过视频 ${video.id}: ${err.message}`, 'error');
                        } finally {
                            processedCount++;
                            updateReadingProgress(`正在读取视频，已获取 ${currentCount} 个视频，处理进度 ${processedCount}/${data.medias.length}`);
                            await new Promise(r => setTimeout(r, 300));
                        }
                    }

                    if (data.has_more) {
                        await getFavVideos(mediaId, ps, pn + 1, videos).then(resolve);
                    } else {
                        document.getElementById('reading-progress')?.remove();
                        resolve(videos);
                    }
                },
                onerror: function(error) {
                    reject(new Error(`网络错误: ${error.statusText}`));
                }
            });
        });
    }

    // 创建新收藏夹
    async function createFolder(title) {
        return new Promise((resolve, reject) => {
            GM_xmlhttpRequest({
                method: 'POST',
                url: 'https://api.bilibili.com/x/v3/fav/folder/add',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                data: `csrf=${getCsrf()}&title=${encodeURIComponent(title)}&jsonp=jsonp`,
                responseType: 'json',
                onload: function(response) {
                    if (response.response && response.response.code === 0) {
                        resolve(response.response.data.id);
                    } else {
                        const errorMsg = response.response ? response.response.message : '创建收藏夹失败';
                        reject(new Error(errorMsg));
                    }
                },
                onerror: function(error) {
                    reject(new Error(`网络错误: ${error.statusText}`));
                }
            });
        });
    }

    // 添加视频到收藏夹
    async function addToFav(aid, fid) {
        return new Promise((resolve, reject) => {
            GM_xmlhttpRequest({
                method: 'POST',
                url: 'https://api.bilibili.com/x/v3/fav/resource/deal',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                data: `csrf=${getCsrf()}&rid=${aid}&type=2&add_media_ids=${fid}&jsonp=jsonp`,
                responseType: 'json',
                onload: function(response) {
                    if (response.response && response.response.code === 0) {
                        resolve(response.response);
                    } else {
                        const errorMsg = response.response ? response.response.message : '添加视频失败';
                        reject(new Error(errorMsg));
                    }
                },
                onerror: function(error) {
                    reject(new Error(`网络错误: ${error.statusText}`));
                }
            });
        });
    }

    // 从收藏夹移除视频
    async function removeFromFav(aid, fid) {
        return new Promise((resolve, reject) => {
            GM_xmlhttpRequest({
                method: 'POST',
                url: 'https://api.bilibili.com/x/v3/fav/resource/deal',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                data: `csrf=${getCsrf()}&rid=${aid}&type=2&del_media_ids=${fid}&jsonp=jsonp`,
                responseType: 'json',
                onload: function(response) {
                    if (response.response && response.response.code === 0) {
                        resolve(response.response);
                    } else {
                        const errorMsg = response.response ? response.response.message : '移除视频失败';
                        reject(new Error(errorMsg));
                    }
                },
                onerror: function(error) {
                    reject(new Error(`网络错误: ${error.statusText}`));
                }
            });
        });
    }

    // --- 界面和进度条函数 ---
    function createReadingProgressDiv() {
        const div = document.createElement('div');
        div.id = 'reading-progress';
        div.className = 'bili-classifier-progress';
        div.innerHTML = `<div>正在读取视频...</div><div class="bili-classifier-progress-bar"><div class="bili-classifier-progress-fill" style="width: 0%"></div></div>`;
        document.body.appendChild(div);
        return div;
    }

    function updateReadingProgress(message) {
        const progressDiv = document.getElementById('reading-progress') || createReadingProgressDiv();
        progressDiv.querySelector('div:first-child').textContent = message;
    }

    function createProgressDiv() {
        const div = document.createElement('div');
        div.id = 'fav-progress';
        div.className = 'bili-classifier-progress';
        div.innerHTML = `<div>正在处理...</div><div class="bili-classifier-progress-bar"><div class="bili-classifier-progress-fill" style="width: 0%"></div></div><div>0/0</div>`;
        document.body.appendChild(div);
        return div;
    }

    function updateProgress(message, current, total, skipped = 0) {
        const progressDiv = document.getElementById('fav-progress') || createProgressDiv();
        progressDiv.querySelector('div:first-child').textContent = message;
        progressDiv.querySelector('.bili-classifier-progress-fill').style.width = `${(current/total)*100}%`;
        progressDiv.querySelector('div:last-child').textContent = `${current}/${total}${skipped > 0 ? ` (跳过${skipped}个)` : ''}`;
    }

    // 创建配置界面
    function createConfigUI(tidGroups) {
        const modal = document.createElement('div');
        modal.className = 'bili-classifier-container bili-classifier-modal';

        let html = `
            <h3>收藏夹自动分类</h3>

            <div class="bili-classifier-content">
                <div class="bili-classifier-radio-group">
                    <label class="bili-classifier-radio-label">
                        <input type="radio" name="operationMode" value="copy" checked> 复制模式
                    </label>
                    <label class="bili-classifier-radio-label">
                        <input type="radio" name="operationMode" value="move"> 移动模式 (将视频移出原收藏夹)
                    </label>
                </div>

                <div class="bili-classifier-option-group">
                    <label class="bili-classifier-checkbox-label">
                        <input type="checkbox" id="autoClassifyUnassigned" checked>
                        对未自定义分组的视频自动按分区分类 (推荐)
                    </label>
                </div>

                <div style="margin-bottom: 20px">
                    <button class="bili-classifier-btn" id="addCustomGroup">添加自定义分组</button>
                </div>
                <div id="customGroups"></div>
                <div id="defaultGroups">
                    <h4>视频分区列表 (${Object.keys(tidGroups).length}个分区)</h4>
        `;

        Object.entries(tidGroups).forEach(([tid, videos]) => {
            html += `
                <div class="bili-classifier-group tid-group" data-tid="${tid}">
                    <div class="bili-classifier-group-header">
                        <span>${videos[0].tname} (${videos.length}个视频)</span>
                    </div>
                </div>
            `;
        });

        html += `
                </div>
            </div>

            <div class="bili-classifier-footer">
                <div class="bili-classifier-links">
                    <a href="https://space.bilibili.com/484456494?spm_id_from=333.1007.0.0" target="_blank" class="bili-classifier-link-btn">我的B站主页</a>
                    <a href="https://github.com/RSLN-creator/T-UserScript" target="_blank" class="bili-classifier-link-btn">GitHub项目</a>
                </div>
                <div class="bili-classifier-footer-buttons">
                    <button class="bili-classifier-btn secondary" id="cancelClassify">取消</button>
                    <button class="bili-classifier-btn" id="startClassify">开始分类</button>
                </div>
            </div>
        `;

        modal.innerHTML = html;
        document.body.appendChild(modal);

        let existingFolders = [];
        getUserFavLists().then(folders => {
            existingFolders = folders;
        }).catch(err => {
            console.error('获取收藏夹列表失败:', err);
        });

        // 绑定添加自定义分组事件
        document.getElementById('addCustomGroup').onclick = async () => {
            const groupDiv = document.createElement('div');
            groupDiv.className = 'bili-classifier-group custom-group';

            const tidOptions = Object.entries(tidGroups)
                .map(([tid, videos]) => `
                    <label class="bili-classifier-checkbox-label">
                        <input type="checkbox" class="bili-classifier-checkbox" value="${tid}">
                        ${videos[0].tname} (${videos.length}个视频)
                    </label>
                `).join('');

            groupDiv.innerHTML = `
                <div class="bili-classifier-group-header">
                    <input type="text" class="bili-classifier-input folder-name" placeholder="新收藏夹名称">
                    <button class="bili-classifier-btn secondary use-existing">使用现有收藏夹</button>
                    <button class="bili-classifier-btn danger remove-group">删除分组</button>
                </div>
                <div class="bili-classifier-checkbox-group tid-options">
                    ${tidOptions}
                </div>
            `;

            document.getElementById('customGroups').appendChild(groupDiv);

            // 绑定使用现有收藏夹事件
            const bindToggleEvent = (button) => {
                button.onclick = (e) => {
                    const group = button.closest('.custom-group');
                    const input = group.querySelector('.folder-name');
                    const select = group.querySelector('select');

                    if (input) {
                        const newSelect = document.createElement('select');
                        newSelect.className = 'bili-classifier-select';
                        newSelect.innerHTML = `<option value="">选择现有收藏夹</option>${existingFolders.map(f => `<option value="${f.id}">${f.title}</option>`).join('')}`;

                        input.parentNode.replaceChild(newSelect, input);
                        button.textContent = '创建新收藏夹';
                        bindToggleEvent(button);
                    } else if (select) {
                        const newInput = document.createElement('input');
                        newInput.type = 'text';
                        newInput.className = 'bili-classifier-input folder-name';
                        newInput.placeholder = '新收藏夹名称';

                        select.parentNode.replaceChild(newInput, select);
                        button.textContent = '使用现有收藏夹';
                        bindToggleEvent(button);
                    }
                };
            };

            bindToggleEvent(groupDiv.querySelector('.use-existing'));

            // 绑定删除事件
            groupDiv.querySelector('.remove-group').onclick = () => {
                groupDiv.remove();
            };
        };

        return new Promise((resolve, reject) => {
            // 绑定开始分类事件
            document.getElementById('startClassify').onclick = () => {
                const config = {
                    custom: [],
                    default: {},
                    operationMode: document.querySelector('input[name="operationMode"]:checked').value,
                    autoClassifyUnassigned: document.getElementById('autoClassifyUnassigned').checked
                };

                // 收集自定义分组配置
                document.querySelectorAll('.custom-group').forEach(group => {
                    const nameInput = group.querySelector('.folder-name, select');
                    const selectedTids = Array.from(group.querySelectorAll('input[type="checkbox"]:checked')).map(cb => cb.value);
                    if (selectedTids.length > 0 && nameInput.value) {
                        config.custom.push({
                            name: nameInput.tagName === 'SELECT' ? nameInput.options[nameInput.selectedIndex].text : nameInput.value,
                            isExisting: nameInput.tagName === 'SELECT',
                            fid: nameInput.tagName === 'SELECT' ? nameInput.value : null,
                            tids: selectedTids
                        });
                    }
                });

                // 准备自动分区列表
                if (config.autoClassifyUnassigned) {
                    Object.keys(tidGroups).forEach(tid => {
                        if (!config.custom.some(g => g.tids.includes(tid))) {
                            config.default[tid] = tidGroups[tid][0].tname;
                        }
                    });
                }

                modal.remove();
                resolve(config);
            };

            document.getElementById('cancelClassify').onclick = () => {
                modal.remove();
                reject(new Error('用户取消操作'));
            };
        });
    }

    // --- 主处理流程 ---
    async function processClassify() {
        let totalProcessed = 0;
        let totalVideos = 0;
        let skippedVideos = 0;
        const sourceFid = new URL(location.href).searchParams.get('fid');

        try {
            if (!sourceFid) throw new Error('未找到收藏夹ID，请在具体的收藏夹页面运行脚本。');

            log('步骤 1/3: 开始获取收藏夹视频详情...');
            const videos = await getFavVideos(sourceFid);
            if (!videos.length) {
                alert('该收藏夹内没有找到有效视频。');
                return;
            }

            const tidGroups = {};
            videos.forEach(video => {
                if (!tidGroups[video.tid]) tidGroups[video.tid] = [];
                tidGroups[video.tid].push(video);
            });

            totalVideos = videos.length;
            log(`步骤 2/3: 获取完成，共找到 ${totalVideos} 个有效视频。`);
            const userConfig = await createConfigUI(tidGroups);

            log('步骤 3/3: 开始执行分类操作...');
            updateProgress(`正在准备分组和创建收藏夹...`, 0, totalVideos);

            // 处理自定义分组
            for (const group of userConfig.custom) {
                let targetFid;
                let folderNameToUse = group.name;

                // 获取或创建目标收藏夹
                if (group.isExisting) {
                    targetFid = group.fid;
                    log(`使用现有收藏夹: "${folderNameToUse}" (ID: ${targetFid})`, 'info');
                } else {
                    // 检查收藏夹名称是否存在（精确匹配）
                    const existingFolderId = await findExistingFolderId(folderNameToUse);
                    if (existingFolderId) {
                        // 使用现有收藏夹
                        targetFid = existingFolderId;
                        log(`发现同名收藏夹，使用现有收藏夹: "${folderNameToUse}" (ID: ${targetFid})`, 'info');
                    } else {
                        // 创建新收藏夹
                        targetFid = await createFolder(folderNameToUse);
                        log(`创建新收藏夹: "${folderNameToUse}" (ID: ${targetFid})`, 'success');
                        await new Promise(r => setTimeout(r, 500));
                    }
                }

                // 添加选中分区的视频
                for (const tid of group.tids) {
                    if (tidGroups[tid]) {
                        for (const video of tidGroups[tid]) {
                            try {
                                await addToFav(video.aid, targetFid);
                                if (userConfig.operationMode === 'move') {
                                    await removeFromFav(video.aid, sourceFid);
                                }
                                totalProcessed++;
                                log(`成功处理视频 ${video.aid} 到 "${folderNameToUse}"`, 'success');
                            } catch (error) {
                                log(`处理视频 ${video.aid} 失败: ${error.message}，已跳过`, 'error');
                                skippedVideos++;
                            }
                            updateProgress(`正在处理视频到分组"${folderNameToUse}"`, totalProcessed, totalVideos, skippedVideos);
                            await new Promise(r => setTimeout(r, RATE_LIMIT_DELAY));
                        }
                    }
                }
            }

            // 处理未分组的视频
            if (userConfig.autoClassifyUnassigned) {
                for (const [tid, folderName] of Object.entries(userConfig.default)) {
                    let targetFid;
                    let folderNameToUse = folderName;

                    // 精确匹配现有收藏夹
                    const existingFolderId = await findExistingFolderId(folderNameToUse);
                    if (existingFolderId) {
                        // 使用现有收藏夹
                        targetFid = existingFolderId;
                        log(`发现同名收藏夹，使用现有收藏夹: "${folderNameToUse}" (ID: ${targetFid})`, 'info');
                    } else {
                        // 创建新收藏夹
                        targetFid = await createFolder(folderNameToUse);
                        log(`创建新收藏夹: "${folderNameToUse}" (ID: ${targetFid})`, 'success');
                    }

                    if (tidGroups[tid]) {
                        for (const video of tidGroups[tid]) {
                            try {
                                await addToFav(video.aid, targetFid);
                                if (userConfig.operationMode === 'move') {
                                    await removeFromFav(video.aid, sourceFid);
                                }
                                totalProcessed++;
                                log(`成功处理视频 ${video.aid} 到 "${folderNameToUse}"`, 'success');
                            } catch (error) {
                                log(`处理视频 ${video.aid} 失败: ${error.message}，已跳过`, 'error');
                                skippedVideos++;
                            }
                            updateProgress(`正在处理视频到"${folderNameToUse}"`, totalProcessed, totalVideos, skippedVideos);
                            await new Promise(r => setTimeout(r, RATE_LIMIT_DELAY));
                        }
                    }
                }
            }

            document.getElementById('fav-progress')?.remove();
            log(`分类完成！处理了 ${totalProcessed} 个视频，跳过了 ${skippedVideos} 个视频`, 'success');
            alert(`分类完成！处理了 ${totalProcessed} 个视频，跳过了 ${skippedVideos} 个视频`);

            if (userConfig.operationMode === 'move') {
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            }

        } catch (error) {
            log(`操作失败: ${error.message}`, 'error');
            alert('操作失败：' + error.message);
            document.getElementById('fav-progress')?.remove();
            document.getElementById('reading-progress')?.remove();
        }
    }

    // 添加触发按钮和链接
    function addButton() {
        const btnContainer = document.createElement('div');
        btnContainer.className = 'bili-classifier-float-btn';

        const btn = document.createElement('button');
        btn.className = 'bili-classifier-btn';
        btn.textContent = '按分区分类';
        btn.onclick = processClassify;

        const links = document.createElement('div');
        links.className = 'bili-classifier-links';
        links.innerHTML = `
            <a href="https://space.bilibili.com/484456494?spm_id_from=333.1007.0.0" target="_blank" class="bili-classifier-link-btn">我的B站</a>
            <a href="https://github.com/RSLN-creator/T-UserScript" target="_blank" class="bili-classifier-link-btn">GitHub</a>
        `;

        btnContainer.appendChild(btn);
        btnContainer.appendChild(links);
        document.body.appendChild(btnContainer);
    }

    // 初始化
    addButton();
})();